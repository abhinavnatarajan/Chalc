{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Example Usage"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "editable": true,
    "lines_to_next_cell": 1,
    "nbsphinx": "hidden",
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "%config InlineBackend.figure_formats = ['svg']\n",
    "from IPython.display import display, Markdown\n",
    "def printmd(object):\n",
    "    display(Markdown(str(object).replace('\\n', '<br>')))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import chalc as ch\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "editable": true,
    "nbsphinx": "hidden",
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "plt.rcParams[\"animation.html\"] = \"jshtml\"\n",
    "import h5py, logging, sys\n",
    "\n",
    "# Disable some deprecation warnings from the seaborn plotting library\n",
    "logging.basicConfig(stream=sys.stdout, level=logging.WARNING)\n",
    "logging.captureWarnings(True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For our data we sample 100 points on a circle with some noise and 100 points from inside the unit disk."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "editable": true,
    "lines_to_next_cell": 2,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "rng = np.random.default_rng(40)\n",
    "num_points_circle = 100\n",
    "num_points_disk = 100\n",
    "mean = [0, 0]\n",
    "cov = np.eye(2)*0.01\n",
    "circle = np.array([[np.sin(2*np.pi*t), np.cos(2*np.pi*t)] for t in rng.random(num_points_circle)]).T +\\\n",
    "    rng.multivariate_normal(mean, cov, num_points_circle).T # points as columns\n",
    "disk = np.sqrt(rng.random(num_points_disk)) * np.array([[np.sin(2*np.pi*t), np.cos(2*np.pi*t)] for t in rng.random(num_points_disk)]).T\n",
    "points = np.concatenate((circle, disk), axis=1)\n",
    "plt.scatter(circle[0, :], circle[1, :], s=10)\n",
    "plt.scatter(disk[0, :], disk[1, :], s=10)\n",
    "plt.gca().set_aspect('equal')\n",
    "colours = [0]*num_points_circle + [1]*num_points_disk\n",
    "plt.title('Point cloud')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "We can compute the chromatic alpha/Delaunay--Cech/Delaunay--Rips complex $K$ of the point cloud using the functions :func:`chromatic.alpha <chalc.chromatic.alpha>`, :func:`chromatic.delcech <chalc.chromatic.delcech>`, and :func:`chromatic.delrips <chalc.chromatic.delrips>` respectively.\n",
    "In each of these cases, :math:`K` has far fewer simplices than either the Čech or Vietoris--Rips complex, which each have :math:`\\displaystyle \\binom{200}{2} = 19900` edges and :math:`\\displaystyle \\binom{200}{3} = 1313400` 2-simplices."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "K, _ = ch.chromatic.alpha(points, colours)\n",
    "printmd(f'$K$ has {len(K.simplices[1])} 1-simplices and {len(K.simplices[2])} 2-simplices')"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    ":math:`K` is a :class:`FilteredComplex <chalc.filtration.FilteredComplex>` object, and simplices in the filtration are objects of type :class:`Simplex <chalc.filtration.Simplex>` (although you should not generally need to interact with the API of these objects).\n",
    "We can visualise the filtration at any given time using :func:`plotting.draw_filtration <chalc.plotting.draw_filtration>`. For example, at time 0.3 we have:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "fig, ax = plt.subplots(1, 3, figsize=(12, 4))\n",
    "ch.plotting.draw_filtration(K, points, time=0.3, include_colours=[0], ax=ax[0])\n",
    "ax[0].set_title('Colour 0')\n",
    "ch.plotting.draw_filtration(K, points, time=0.3, include_colours=[1], ax=ax[1])\n",
    "ax[1].set_title('Colour 1')\n",
    "ch.plotting.draw_filtration(K, points, time=0.3, ax=ax[2])\n",
    "ax[2].set_title('Both colours')\n",
    "for i in range(3):\n",
    "    ax[i].set_xlim(-1.2, 1.2)\n",
    "    ax[i].set_ylim(-1.2, 1.2)\n",
    "fig.suptitle('Complexes at $t=0.3$')\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "editable": true,
    "raw_mimetype": "text/restructuredtext",
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "The functions :func:`sixpack.from_filtration <chalc.sixpack.from_filtration>` and :func:`sixpack.compute <chalc.sixpack.compute>` compute the 6-pack of persistent homology diagrams of the chromatic alpha/Delaunay--Čech complex/Delaunay--Rips complexes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# using the previously computed filtration\n",
    "dgms_alpha = ch.sixpack.from_filtration(K, dom=[0])\n",
    "# or directly from the point cloud\n",
    "dgms_delcech = ch.sixpack.compute(points, colours, dom=[0], method=\"delcech\")\n",
    "dgms_delrips = ch.sixpack.compute(points, colours, dom=[0], method=\"delrips\")"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "editable": true,
    "raw_mimetype": "text/restructuredtext",
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Each 6-pack is an object of type :class:`DiagramEnsemble <chalc.sixpack.DiagramEnsemble>` that has the kernel, cokernel, domain, codomain, and relative persistent homology diagrams.\n",
    "The class :class:`DiagramEnsemble <chalc.sixpack.DiagramEnsemble>` implements the abstract base class :class:`Mapping <collections.abc.Mapping>` from the Python standard library and supports dictionary-like syntax.\n",
    "In particular you can access the diagrams by indexing into the 6-pack."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dc8e1dbb",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    }
   },
   "outputs": [],
   "source": [
    "print(f\"The diagram names are: {list(dgms_alpha.keys())}\")\n",
    "\n",
    "# iterate over the diagrams like in a dictionary\n",
    "for diagram_name, diagram in dgms_alpha:\n",
    "    print(diagram_name)\n",
    "    # do something with the diagram\n",
    "\n",
    "# access individual diagrams by indexing\n",
    "ker = dgms_alpha['ker']"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "editable": true,
    "raw_mimetype": "text/restructuredtext",
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Every feature in the diagram is represented by either a pair of simplices :math:`(\\sigma, \\tau)` if the feature has a finite birth and death time, or an unpaired simplex :math:`\\sigma` if the feature does not die.\n",
    "For a :math:`p`-dimensional feature, :math:`\\dim(\\sigma) = p+1` if the diagram is the kernel, and :math:`\\dim(\\sigma) = p` otherwise. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "print(dgms_alpha['ker'])"
   ]
  },
  {
   "cell_type": "raw",
   "id": "3589a1f4",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "Each individual diagram is an object of type :class:`SimplexPairings <chalc.sixpack.SimplexPairings>`, which supports set-like syntax and implements the abstract base class :class:`Collection <collections.abc.Collection>` from the Python standard library."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# check if the diagram is empty\n",
    "print(\"The kernel is non-empty.\" if dgms_alpha['ker'] else \"The kernel is empty.\")\n",
    "# or you can use bool(dgms_alpha.ker)\n",
    "\n",
    "# __len__()\n",
    "# get the number of features in the diagram \n",
    "print(f\"The cokernel has {len(dgms_alpha['cok'])} features.\")\n",
    "\n",
    "# __contains__()\n",
    "# check if a feature exists in a diagram\n",
    "print(\"The domain contains a feature represented by the simplex pair (20, 40): \"\n",
    "      f\"{(20, 40) in dgms_alpha['dom']}\")\n",
    "\n",
    "# __iter__()\n",
    "# iterate over the paired and unpaired simplices together\n",
    "for feature in dgms_alpha['ker']:\n",
    "    if isinstance(feature, tuple):\n",
    "        sigma, tau = feature\n",
    "        # do something with a pair of simplices\n",
    "        ...\n",
    "    else:\n",
    "        sigma = feature\n",
    "        # do something with an unpaired simplex\n",
    "        ...\n",
    "\n",
    "# the paired and unpaired simplices can be considered separately\n",
    "print(\"The \\\"paired\\\" property of the kernel has type: \"\n",
    "      f\"{type(dgms_alpha['ker'].paired)}\")\n",
    "\n",
    "print(\"The \\\"unpaired\\\" property of the kernel has type: \"\n",
    "      f\"{type(dgms_alpha['ker'].unpaired)}\")\n",
    "\n",
    "for sigma, tau in dgms_alpha['ker'].paired:\n",
    "    # do something with paired simplices\n",
    "    ...\n",
    "\n",
    "for sigma in dgms_alpha['dom'].unpaired:\n",
    "    # do something with unpaired simplices\n",
    "    ..."
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "editable": true,
    "raw_mimetype": "text/restructuredtext",
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "A convenience function :func:`get_matrix <chalc.sixpack.DiagramEnsemble.get_matrix>` is provided to extract the diagrams as a matrix of birth/death times:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "np.set_printoptions(threshold=10)\n",
    "print(dgms_alpha.get_matrix('dom', 0)) # get the domain in dimension zero\n",
    "# dgms_alpha.get('ker', [0, 1]) to get the kernel in dimensions zero and one\n",
    "# dgms_alpha.get('ker') to get the kernel in all dimensions from zero to max(dgms_alpha.dimensions)"
   ]
  },
  {
   "cell_type": "raw",
   "id": "57beb994",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "You can also access the :attr:`entrance_times <chalc.sixpack.DiagramEnsemble.entrance_times>` and :attr:`dimensions <chalc.sixpack.DiagramEnsemble.dimensions>` of simplices in the 6-pack diagrams."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1aeea807",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(dgms_alpha.entrance_times)\n",
    "print(dgms_alpha.dimensions)"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "editable": true,
    "raw_mimetype": "text/restructuredtext",
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "The convenience functions :func:`plotting.plot_sixpack <chalc.plotting.plot_sixpack>` and :func:`plotting.plot_diagram <chalc.plotting.plot_diagram>` are provided for plotting either a 6-pack or a specific diagram from a 6-pack."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "fig1, ax1 = ch.plotting.plot_sixpack(dgms_alpha, tolerance = 1e-3)\n",
    "fig1.suptitle('Chromatic Alpha')\n",
    "fig1.set_figwidth(15)\n",
    "fig1.set_figheight(9)\n",
    "fig1.subplots_adjust(top=0.92)\n",
    "plt.show()\n",
    "fig2, ax2 = plt.subplots(1, 3)\n",
    "# You can specify the dimensions of features to include in the plot.\n",
    "ch.plotting.plot_diagram(dgms_alpha, 'rel', dimensions = {0, 2}, truncation = 0.3, ax = ax2[0], tolerance = 1e-3)\n",
    "ax2[0].set_title('Chromatic Alpha')\n",
    "# You can also specify a single dimension as an integer.\n",
    "ch.plotting.plot_diagram(dgms_delcech, 'rel', dimensions = 1, truncation = 0.3, ax = ax2[1], tolerance = 1e-3)\n",
    "ax2[1].set_title('Chromatic Delaunay-Cech')\n",
    "# If no dimensions are specified, all features will be included.\n",
    "ch.plotting.plot_diagram(dgms_delrips, 'rel', truncation = 0.3, ax = ax2[2], tolerance = 1e-3)\n",
    "ax2[2].set_title('Chromatic Delaunay-Rips')\n",
    "fig2.suptitle('Individual relative diagrams')\n",
    "fig2.set_figwidth(15)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can save the diagrams to a HDF5 file or load a diagram from a HDF5 file.\n",
    "The HDF5 format is "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "with h5py.File('test.h5', 'w') as f:\n",
    "    dgms_alpha.save(f)\n",
    "\n",
    "with h5py.File('test.h5', 'r') as f:\n",
    "    dgms_alpha_from_file = ch.sixpack.DiagramEnsemble.from_file(f)\n",
    "\n",
    "print(dgms_alpha_from_file == dgms_alpha)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "We can visualise the 2-skeleton of the filtration for points in 2D:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "animation = ch.plotting.animate_filtration(\n",
    "    K, points, filtration_times=list(np.linspace(0, 1.0, 45)), animation_length=5)\n",
    "animation"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
