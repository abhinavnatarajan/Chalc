chalc.chromatic
===============

.. py:module:: chalc.chromatic

.. autoapi-nested-parse::

   Module containing geometry routines to compute chromatic Delaunay filtrations.



Functions
---------

.. autoapisummary::

   chalc.chromatic.alpha
   chalc.chromatic.delaunay
   chalc.chromatic.delcech
   chalc.chromatic.delrips


Module Contents
---------------

.. py:function:: alpha(x: numpy.ndarray[tuple[M, N], numpy.dtype[numpy.float64]], colours: numpy.ndarray[tuple[M, Literal[1]], numpy.dtype[numpy.uint64]]) -> tuple[chalc.filtration.FilteredComplex, bool]
                 alpha(x: numpy.ndarray[tuple[M, N], numpy.dtype[numpy.float64]], colours: list[int]) -> tuple[chalc.filtration.FilteredComplex, bool]

   Compute the chromatic alpha filtration of a coloured point cloud.

   :param x: Numpy matrix whose columns are points in the point cloud.
   :param colours: List or numpy array of integers describing the colours of the points.

   :returns: The chromatic alpha filtration and a boolean flag to
             indicate if numerical issues were encountered.
             In case of numerical issues, a warning is also raised.

   :raises ValueError: If any value in ``colours`` is
       >= :attr:`MaxColoursChromatic <chalc.chromatic.MaxColoursChromatic>` or < 0,
       or if the length of ``colours`` does not match the number of points.

   .. rubric:: Notes

   This function is included for pedantic reasons.
   For most purposes you should instead consider using :func:`chalc.chromatic.delcech`,
   which is faster to compute, more numerically stable, and has the same persistent homology.

   .. seealso:: :func:`delrips`, :func:`delcech`


.. py:function:: delaunay(x: numpy.ndarray[tuple[M, N], numpy.dtype[numpy.float64]], colours: numpy.ndarray[tuple[M, Literal[1]], numpy.dtype[numpy.uint64]]) -> chalc.filtration.FilteredComplex
                 delaunay(x: numpy.ndarray[tuple[M, N], numpy.dtype[numpy.float64]], colours: list[int]) -> chalc.filtration.FilteredComplex

   Compute the chromatic Delaunay triangulation of a coloured point cloud in Euclidean space.

   :param x: Numpy matrix whose columns are points in the point cloud.
   :param colours: List or numpy array of integers describing the colours of the points.

   :raises ValueError: If any value in ``colours`` is
       >= :attr:`MaxColoursChromatic <chalc.chromatic.MaxColoursChromatic>` or < 0,
       or if the length of ``colours`` does not match the number of points.

   :returns: The Delaunay triangulation.


.. py:function:: delcech(x: numpy.ndarray[tuple[M, N], numpy.dtype[numpy.float64]], colours: numpy.ndarray[tuple[M, Literal[1]], numpy.dtype[numpy.uint64]]) -> tuple[chalc.filtration.FilteredComplex, bool]
                 delcech(x: numpy.ndarray[tuple[M, N], numpy.dtype[numpy.float64]], colours: list[int]) -> tuple[chalc.filtration.FilteredComplex, bool]

   Compute the chromatic Delaunay--Čech filtration of a coloured point cloud.

   :param x: Numpy matrix whose columns are points in the point cloud.
   :param colours: List or numpy array of integers describing the colours of the points.

   :returns: The chromatic Delaunay--Čech filtration and a boolean flag to indicate
             if numerical issues were encountered.
             In case of numerical issues, a warning is also raised.

   :raises ValueError: If any value in ``colours`` is
       >= :attr:`MaxColoursChromatic <chalc.chromatic.MaxColoursChromatic>` or < 0,
       or if the length of ``colours`` does not match the number of points.

   .. rubric:: Notes

   The chromatic Delaunay--Čech filtration of the point cloud
   has the same set of simplices as the chromatic alpha filtration,
   but with Čech filtration times.

   .. seealso:: :func:`alpha`, :func:`delrips`


.. py:function:: delrips(x: numpy.ndarray[tuple[M, N], numpy.dtype[numpy.float64]], colours: numpy.ndarray[tuple[M, Literal[1]], numpy.dtype[numpy.uint64]]) -> tuple[chalc.filtration.FilteredComplex, bool]
                 delrips(x: numpy.ndarray[tuple[M, N], numpy.dtype[numpy.float64]], colours: list[int]) -> tuple[chalc.filtration.FilteredComplex, bool]

   Compute the chromatic Delaunay--Rips filtration of a coloured point cloud.

   :param x: Numpy matrix whose columns are points in the point cloud.
   :param colours: List or numpy array of integers describing the colours of the points.

   :returns: The chromatic Delaunay--Rips filtration and a boolean flag to indicate
             if numerical issues were encountered.
             In case of numerical issues, a warning is also raised.

   :raises ValueError: If any value in ``colours`` is
       >= :attr:`MaxColoursChromatic <chalc.chromatic.MaxColoursChromatic>` or < 0,
       or if the length of ``colours`` does not match the number of points.

   .. rubric:: Notes

   The chromatic Delaunay--Rips filtration of the point cloud
   has the same set of simplices as the chromatic alpha filtration,
   but with Vietoris--Rips filtration times.
   The convention used is that the filtration time of a simplex
   is half the maximum edge length in that simplex.
   With this convention, the chromatic Delaunay--Rips filtration
   and chromatic alpha filtration have the same persistence diagrams
   in degree zero.

   .. seealso:: :func:`alpha`, :func:`delcech`


