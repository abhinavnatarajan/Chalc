chalc.plotting
==============

.. py:module:: chalc.plotting

.. autoapi-nested-parse::

   Plotting and visualisation utilities.



Functions
---------

.. autoapisummary::

   chalc.plotting.animate_filtration
   chalc.plotting.draw_filtration
   chalc.plotting.plot_diagram
   chalc.plotting.plot_sixpack


Module Contents
---------------

.. py:function:: animate_filtration(K: chalc.filtration.FilteredComplex, points: chalc.sixpack.NumpyMatrix[Literal[2], NumCols, numpy.floating], filtration_times: collections.abc.Sequence[float], animation_length: float) -> matplotlib.animation.FuncAnimation

   Create animation of 2-skeleton of filtered simplicial complex.

   :param K: A filtered complex.
   :param points: The vertices of ``K`` as a :math:`2\times N` numpy matrix.
   :param filtration_times: Sequence of filtration times for which to draw animation frames.
   :param animation_length: Total length of the animation in seconds, unrelated to the filtration times.


.. py:function:: draw_filtration(K: chalc.filtration.FilteredComplex, points: chalc.sixpack.NumpyMatrix[Literal[2], NumCols, numpy.floating], time: float, include_colours: collections.abc.Collection[int] | None = None, ax: matplotlib.axes.Axes | None = None) -> matplotlib.axes.Axes

   Visualise a 2D filtration at given time, optionally including only certain colours.

   :param K: A filtered 2-dimensional simplicial complex.
   :param points: The vertices of ``K`` as a :math:`2\times N` numpy matrix.
   :param time: Filtration times for which to draw simplices.
   :param include_colours: Optional collection of colours to include.
                           If not specified then all colours will be drawn.
   :param ax: A matplotlib axes object.
              If provided then the diagram will be plotted on the given axes.


.. py:function:: plot_diagram(dgms: chalc.sixpack.DiagramEnsemble, diagram_name: chalc.sixpack.DiagramEnsemble.DiagramName, truncation: float | None = None, dimensions: collections.abc.Set[int] | int | None = None, ax: matplotlib.axes.Axes | None = None, tolerance: float = 0) -> matplotlib.axes.Axes | None

   Plot a specific diagram from a 6-pack.

   :param dgms: The 6-pack of persistence diagrams.
   :param diagram_name: One of ``'ker'``, ``'cok'``, ``'dom'``, ``'cod'``, ``'im'``, or ``'rel'``.
   :param truncation: The maximum entrance time for which the diagrams are plotted.
                      A sensible default will be calculated if not provided.
   :param dimensions: The homological dimensions for which to plot features.
                      If not provided, all dimensions will be included in the plots.
   :param ax: A matplotlib axes object.
              If provided then the diagram will be plotted on the given axes.
   :param tolerance: Only features with persistence greater than this value will be plotted.


.. py:function:: plot_sixpack(dgms: chalc.sixpack.DiagramEnsemble, truncations: collections.abc.Mapping[chalc.sixpack.DiagramEnsemble.DiagramName, float] | float | None = None, dimensions: collections.abc.Set[int] | int | None = None, tolerance: float = 0) -> tuple[matplotlib.figure.Figure, chalc.sixpack.NumpyMatrix[Literal[2], Literal[3], matplotlib.axes.Axes]]

   Plots the 6-pack of persistence diagrams returned by :func:`compute <.sixpack.compute>`.

   :param dgms: The 6-pack of persistence diagrams.
   :param truncations: The maximum entrance time upto which features are plotted.
                       Can be either a single value, or a mapping from diagram names to values.
                       A sensible default will be calculated (for each individual diagram) if not provided.
   :param dimensions: The homological dimensions for which to plot features.
                      If not provided, all dimensions will be included in the plots.
   :param tolerance: Only features with persistence greater than this value will be plotted.


