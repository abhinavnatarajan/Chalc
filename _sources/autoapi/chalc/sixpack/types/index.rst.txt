chalc.sixpack.types
===================

.. py:module:: chalc.sixpack.types

.. autoapi-nested-parse::

   Implementation of a 6-pack of persistence diagrams.



Classes
-------

.. autoapisummary::

   chalc.sixpack.types.SimplexPairings
   chalc.sixpack.types.SixPack


Module Contents
---------------

.. py:class:: SimplexPairings(paired: collections.abc.Collection[tuple[int, int]] = set(), unpaired: collections.abc.Collection[int] = set())

   Bases: :py:obj:`collections.abc.Collection`

   .. autoapi-inheritance-diagram:: chalc.sixpack.types.SimplexPairings
      :parts: 1


   Persistence diagram represented by paired and unpaired simplices.


   .. py:method:: __bool__() -> bool

      Return true if the diagram is non-empty.



   .. py:method:: __contains__(feature: object) -> bool

      Return true if a feature is in the diagram.

      The feature to check should be either a pair of simplices (int, int)
      or a single simplex (int).



   .. py:method:: __eq__(other: object) -> bool

      Check if two diagrams have the same paired and unpaired simplices.



   .. py:method:: __hash__() -> int

      Return a hash of the persistence diagram.



   .. py:method:: __iter__() -> collections.abc.Iterator[tuple[int, int] | int]

      Iterate over all features in the diagram.



   .. py:method:: __len__() -> int

      Return the number of features in the diagram.



   .. py:method:: __str__() -> str

      Represent the persistence diagram as a string.



   .. py:property:: paired
      :type: frozenset[tuple[int, int]]


      Set of indices of paired simplices.


   .. py:method:: paired_as_matrix() -> numpy.ndarray[tuple[int, Literal[2]], numpy.dtype[numpy.int64]]

      Return a matrix representation of the finite persistence features in the diagram.



   .. py:property:: unpaired
      :type: frozenset[int]


      Set of indices of unpaired simplices.


.. py:class:: SixPack(kernel: SimplexPairings | None = None, cokernel: SimplexPairings | None = None, domain: SimplexPairings | None = None, codomain: SimplexPairings | None = None, image: SimplexPairings | None = None, relative: SimplexPairings | None = None, entrance_times: collections.abc.Sequence[float] = [], dimensions: collections.abc.Sequence[int] = [])

   Bases: :py:obj:`collections.abc.Mapping`

   .. autoapi-inheritance-diagram:: chalc.sixpack.types.SixPack
      :parts: 1


   6-pack of persistence diagrams.


   .. py:method:: __bool__() -> bool

      Return true if any diagram in the 6-pack is non-empty.



   .. py:method:: __contains__(key: object) -> bool

      Return true if a diagram is in the 6-pack.



   .. py:method:: __eq__(other: object) -> bool

      Check if two 6-packs of persistence diagrams are identical.



   .. py:method:: __getitem__(key: DiagramName) -> SimplexPairings

      Access a specific diagram in the 6-pack.



   .. py:method:: __hash__() -> int

      Return a hash of the 6-pack of persistence diagrams.



   .. py:method:: __iter__() -> collections.abc.Iterator[DiagramName]

      Iterate over all diagrams in the 6-pack.



   .. py:method:: __len__() -> int

      Return the number of diagrams in the 6-pack.



   .. py:property:: dimensions
      :type: numpy.ndarray[tuple[int], numpy.dtype[numpy.int64]]


      Dimensions of the simplices.


   .. py:property:: entrance_times
      :type: numpy.ndarray[tuple[int], numpy.dtype[numpy.float64]]


      Entrance times of the simplices.


   .. py:method:: filter(func: collections.abc.Callable[[str, int, float, float], bool]) -> SixPack

      Filter out features in the diagram.

      ``func`` should take four arguments: the name of the diagram to which a feature
      belongs, the dimension of the feature, and its birth and death times, and should return
      a boolean indicating whether the feature should be kept.



   .. py:method:: from_file(file: h5py.Group) -> SixPack
      :classmethod:


      Load a 6-pack of persistence diagrams from a HDF5 file or group.

      :param file: A h5py file or group.



   .. py:method:: get_matrix(diagram_name: DiagramName, dimension: int) -> numpy.ndarray[tuple[int, Literal[2]], numpy.dtype[numpy.float64]]
                  get_matrix(diagram_name: DiagramName, dimension: list[int] | None = None) -> list[numpy.ndarray[tuple[int, Literal[2]], numpy.dtype[numpy.float64]]]

      Get a specific diagram as a matrix of birth and death times.

      :param diagram_name: One of ``'ker'``, ``'cok'``, ``'dom'``,
                           ``'cod'``, ``'im'``, or ``'rel'``.
      :param dimension: Dimension(s) of the diagram desired.
                        If a list is provided then a list of matrices is returned,
                        with the order of matrices respecting the order of entries of `dim`.
                        If `dimension` is not provided then the returned matrix will contain
                        persistent features from all homological dimensions
                        from zero to ``max(self.dimensions)``.

      :returns: An :math:`m \times 2` matrix whose rows are
                a pair of birth and death times, or a list of such matrices.



   .. py:method:: items() -> collections.abc.ItemsView[DiagramName, SimplexPairings]

      View of the diagrams in the 6-pack.



   .. py:method:: keys() -> collections.abc.KeysView[DiagramName]

      View of the names of the diagrams in the 6-pack.



   .. py:method:: names() -> tuple[DiagramName, Ellipsis]
      :classmethod:


      Return the names of the diagrams in the 6-pack.



   .. py:method:: num_features() -> int

      Count the total number of features across all diagrams in the 6-pack.



   .. py:method:: save(file: h5py.Group) -> None

      Save a 6-pack of persistence diagrams to a HDF5 file or group.

      :param file: A h5py file or group.



   .. py:method:: values() -> collections.abc.ValuesView[SimplexPairings]

      View of the diagrams in the 6-pack.



