chalc.sixpack
=============

.. py:module:: chalc.sixpack

.. autoapi-nested-parse::

   Routines for computing 6-packs of persistence diagrams.



Classes
-------

.. autoapisummary::

   chalc.sixpack.SimplexPairings
   chalc.sixpack.DiagramEnsemble


Functions
---------

.. autoapisummary::

   chalc.sixpack.from_filtration
   chalc.sixpack.compute
   chalc.sixpack.save_diagrams
   chalc.sixpack.load_diagrams


Module Contents
---------------

.. py:function:: from_filtration(K: chalc.filtration.FilteredComplex, dom: collections.abc.Collection[int] | int | None = None, k: int | None = None, max_diagram_dimension: int | None = None, tolerance: float = 0) -> DiagramEnsemble

   Compute the 6-pack of persistence diagrams associated to a filtered simplicial complex with coloured vertices.

   Given a filtered chromatic simplicial complex :math:`K` and a subcomplex :math:`L` of :math:`K`, this function computes the 6-pack of persistence diagram associated with the inclusion map :math:`f : L \hookrightarrow K`. The subcomplex is specified by
   the colours of its vertices, or by an integer :math:`k` wherein all simplices with :math:`k` or fewer colours are considered part of the subcomplex.

   :param K: A filtered chromatic simplicial complex.
   :param dom: Integer or collection of integers describing the colours of the points in the domain (the subcomplex :math:`L`).
   :param k: If not ``None``, then the domain is taken to be the :math:`k`-chromatic subcomplex of :math:`K`, i.e., the subcomplex of simplices having at most :math:`k` colours.
   :param max_diagram_dimension: Maximum homological dimension for which the persistence diagrams are computed. By default diagrams of all dimensions are computed.
   :param tolerance: Retain only points with persistence strictly greater than this value.

   :returns:

             #. :math:`H_*(L)` (domain)
             #. :math:`H_*(K)` (codomain)
             #. :math:`\ker(f_*)` (kernel)
             #. :math:`\mathrm{coker}(f_*)` (cokernel)
             #. :math:`\mathrm{im}(f_*)` (image)
             #. :math:`H_*(K, L)` (relative homology)

             Each diagram is represented by sets of paired and unpaired simplices,
             and contain simplices of all dimensions. ``dgms`` also contains the
             entrance times of the simplices and their dimensions.
   :rtype: Diagrams corresponding to the following persistence modules (where :math:`H_*` is the persistent homology functor and :math:`f_*` is the induced map on persistent homology)


.. py:function:: compute(x: numpy.ndarray[tuple[int, int], numpy.dtype[numpy.float64]], colours: collections.abc.Sequence[int], dom: collections.abc.Collection[int] | int | None = None, k: int | None = None, method: Literal['alpha', 'delcech', 'delrips'] = 'alpha', max_diagram_dimension: int | None = None, tolerance: float = 0) -> DiagramEnsemble

   Compute the 6-pack of persistence diagrams of a coloured point-cloud.

   This function constructs a filtered simplicial complex :math:`K` from the point cloud, and computes the 6-pack of persistence diagrams associated with the inclusion :math:`f : L \hookrightarrow K` where :math:`L` is some filtered subcomplex of :math:`K`.

   :param x: Numpy matrix whose columns are points.
   :param colours: Sequence of integers describing the colours of the points.
   :param dom: Integer or collection of integers describing the colours of the points in the domain (the subcomplex :math:`L`).
   :param k: If not ``None``, then the domain is taken to be the :math:`k`-chromatic subcomplex of :math:`K`, i.e., the subcomplex of simplices having at most :math:`k` colours.
   :param method: Filtration used to construct the chromatic complex. Must be one of ``'alpha'``, ``'delcech'``, or ``'delrips'``.
   :param max_diagram_dimension: Maximum homological dimension for which the persistence diagrams are computed. By default diagrams of all dimensions are computed.
   :param tolerance: Retain only points with persistence strictly greater than this value.

   Returns :
           Diagrams corresponding to the following persistence modules (where :math:`H_*` is the persistent homology functor and :math:`f_*` is the induced map on persistent homology):

           #. :math:`H_*(L)` (domain)
           #. :math:`H_*(K)` (codomain)
           #. :math:`\ker(f_*)` (kernel)
           #. :math:`\mathrm{coker}(f_*)` (cokernel)
           #. :math:`\mathrm{im}(f_*)` (image)
           #. :math:`H_*(K, L)` (relative homology)

           Each diagram is represented by lists of paired and unpaired simplices,
           and contains simplices of all dimensions. ``dgms`` also contains the
           entrance times of the simplices and their dimensions.


.. py:class:: SimplexPairings

   Persistence diagram object, represented by a
   list of simplex pairings and a list of unpaired simplices.


.. py:class:: DiagramEnsemble

   6-pack of persistence diagrams.


   .. py:method:: threshold(tolerance: float) -> DiagramEnsemble

      Discard all features with persistence ``<=tolerance``.



   .. py:method:: get(diagram_name: Literal['ker', 'cok', 'dom', 'cod', 'im', 'rel'], dim: int) -> numpy.ndarray[tuple[int, int], numpy.dtype[numpy.float64]]
                  get(diagram_name: Literal['ker', 'cok', 'dom', 'cod', 'im', 'rel'], dim: list[int] | None = None) -> list[numpy.ndarray[tuple[int, int], numpy.dtype[numpy.float64]]]

      Get a specific diagram as a matrix of birth and death times.

      :param diagram_name: One of ``'ker'``, ``'cok'``, ``'dom'``, ``'cod'``, ``'im'``, or ``'rel'``.
      :param dim: Dimension(s) of the diagram desired. If a list is provided then a list of matrices is returned, with the order of matrices respecting the order of entries of `dim`. If `dim` is not provided then the returned matrix will contain persistent features from all homological dimensions from zero to ``max(self.dimensions)``.

      :returns: An :math:`m \times 2` matrix whose rows are a pair of birth and death times, or a list of such matrices.



.. py:function:: save_diagrams(dgms: DiagramEnsemble, file: h5py.Group) -> None

   Save a 6-pack of persistence diagrams to a HDF5 file or group.

   :param dgms: 6-pack of diagrams to save to file/group.
   :param file: A h5py file or group.


.. py:function:: load_diagrams(file: h5py.Group) -> DiagramEnsemble

   Load a 6-pack of persistence diagrams from a HDF5 file or group.


