chalc.sixpack
=============

.. py:module:: chalc.sixpack

.. autoapi-nested-parse::

   Routines for computing 6-packs of persistence diagrams.



Classes
-------

.. autoapisummary::

   chalc.sixpack.KChromaticGluingMap
   chalc.sixpack.KChromaticInclusion
   chalc.sixpack.SubsetInclusion


Functions
---------

.. autoapisummary::

   chalc.sixpack.compute
   chalc.sixpack.from_filtration


Package Contents
----------------

.. py:class:: KChromaticGluingMap

   Bases: :py:obj:`int`


   Corresponds to gluing all subfiltrations spanned by :math:`k` colours.

   Given a chromatic filtration :math:`K` with colours :math:`C`,
   this is the gluing map :math:`\bigsqcup_{\substack{I \subset C\\ |I| = k}} K_I \to K`,
   where :math:`K_I` is the subfiltration spanned by simplices
   whose colours are a subset of :math:`I`.



.. py:class:: KChromaticInclusion

   Bases: :py:obj:`int`


   Corresponds to the inclusion of the :math:`k`-chromatic subcomplex of a chromatic filtration.

   Given a chromatic filtration :math:`K`, its :math:`k`-chromatic subcomplex
   is the subfiltration spanned by simplices having at most :math:`k` colours.



.. py:class:: SubsetInclusion(x: collections.abc.Collection[int])

   Bases: :py:obj:`set`\ [\ :py:obj:`int`\ ]


   Corresponds to the inclusion of the subcomplex spanned by a given subset of colours.


.. py:function:: compute(points: numpy.ndarray[tuple[compute.NumRows, compute.NumCols], numpy.dtype[numpy.float64]], colours: collections.abc.Sequence[int], mapping_method: SubsetInclusion | KChromaticInclusion | KChromaticGluingMap, filtration_algorithm: Literal['alpha', 'delcech', 'delrips'] = 'delcech', max_diagram_dimension: int | None = None, threshold: float = 0) -> _diagram_ensemble.DiagramEnsemble

   Compute the 6-pack of persistence diagrams of a coloured point-cloud.

   This function constructs a filtered simplicial complex :math:`K`
   from the point cloud, and computes the 6-pack of persistence diagrams
   associated with a map of :math:`f : L \to K` of filtrations,
   where :math:`L` is some filtration constructed from :math:`K`.

   :param points: Numpy matrix whose columns are points.
   :param colours: Sequence of integers describing the colours of the points.
   :param mapping_method: The method for constructing the map
                          of filtrations.
   :param filtration_algorithm: Filtration used to construct the chromatic complex.
                                Must be one of ``'alpha'``, ``'delcech'``, or ``'delrips'``.
   :param max_diagram_dimension: Maximum homological dimension for which the persistence diagrams are computed.
                                 By default diagrams of all dimensions are computed.
   :param threshold: Retain only points with persistence strictly greater than this value.

   Returns :
           Diagrams corresponding to the following persistence modules
           (where :math:`H_*` is the persistent homology functor and
           :math:`f_*` is the induced map on persistent homology):

           #. :math:`H_*(L)` (domain)
           #. :math:`H_*(K)` (codomain)
           #. :math:`\ker(f_*)` (kernel)
           #. :math:`\mathrm{coker}(f_*)` (cokernel)
           #. :math:`\mathrm{im}(f_*)` (image)
           #. :math:`H_*(K, L)` (relative homology)

           Each diagram is represented by sets of paired and unpaired simplices,
           and contains simplices of all dimensions. ``dgms`` also contains the
           entrance times of the simplices and their dimensions.

   .. seealso::

      :func:`from_filtration`, :class:`SubsetInclusion`,
      :class:`KChromaticInclusion`, :class:`KChromaticGluingMap`


.. py:function:: from_filtration(filtration: chalc.filtration.FilteredComplex, mapping_method: SubsetInclusion | KChromaticInclusion | KChromaticGluingMap, max_diagram_dimension: int | None = None, threshold: float = 0) -> _diagram_ensemble.DiagramEnsemble

   Compute 6-pack of persistence diagrams from a chromatic filtration.

   Given a filtered chromatic simplicial complex :math:`K`
   this function computes the 6-pack of persistence diagram
   associated with a map of :math:`f : L \to K` of filtrations,
   where :math:`L` is some filtration constructed from :math:`K`.

   :param filtration: A filtered chromatic simplicial complex.
   :param mapping_method: The method for constructing the map
                          of filtrations.
   :param max_diagram_dimension: Maximum homological dimension for which the persistence diagrams are computed.
                                 By default diagrams of all dimensions are computed.
   :param threshold: Retain only points with persistence strictly greater than this value.

   :returns: Diagrams corresponding to the following persistence modules
             (where :math:`H_*` is the persistent homology functor and
             :math:`f_*` is the induced map on persistent homology):

             #. :math:`H_*(L)` (domain)
             #. :math:`H_*(K)` (codomain)
             #. :math:`\ker(f_*)` (kernel)
             #. :math:`\mathrm{coker}(f_*)` (cokernel)
             #. :math:`\mathrm{im}(f_*)` (image)
             #. :math:`H_*(K, L)` (relative homology)

             Each diagram is represented by sets of paired and unpaired simplices,
             and contain simplices of all dimensions. ``dgms`` also contains the
             entrance times of the simplices and their dimensions.

   .. seealso::

      :func:`compute`, :class:`SubsetInclusion`,
      :class:`KChromaticInclusion`, :class:`KChromaticGluingMap`


