chalc.filtration
================

.. py:module:: chalc.filtration

.. autoapi-nested-parse::

   Module containing utilities to store and manipulate abstract filtered simplicial complexes.



Classes
-------

.. autoapisummary::

   chalc.filtration.Filtration
   chalc.filtration.Simplex


Functions
---------

.. autoapisummary::

   chalc.filtration.complete_complex
   chalc.filtration.standard_simplex


Module Contents
---------------

.. py:class:: Filtration(n: int, k: int)

   Class representing a filtered simplicial complex.


   .. py:method:: add_simplex(vertices: list[int], filt_value: float) -> bool

      Add a simplex to a filtered simplicial complex.

      :param vertices: List of vertex labels corresponding to existing vertices in the complex.
      :param filt_value: Filtration value to associate to the new simplex.

      .. note::

         Faces of the added simplex that are already present
         in the simplicial complex will have their filtration values reduced if necessary.



   .. py:property:: dimension
      :type: int


      Current maximum dimension of a maximal simplex in the complex.


   .. py:method:: get_label_from_vertex_labels(vertices: list[int]) -> int

      Get the dictionary key of a simplex.

      The key of a simplex is its lexicographic index with respect to
      its vertex labels sorted in ascending order, counting all
      possible sorted subsequences of :math:`(0, ..., N-1)` of length :math:`k`,
      where :math:`N` is the number of vertices in the complex.
      The simplex need not be present in the simplicial complex.

      :param vertices: List of vertex labels of the simplex.



   .. py:method:: has_simplex(vertices: list[int]) -> bool

      Check for membership of a simplex in the complex.

      :param vertices: Vertex labels of the simplex to check for.



   .. py:method:: is_filtration() -> bool

      Check if the filtration property is satisfied.

      Returns true if each simplex has a filtration value at least as large as each of its faces.



   .. py:property:: max_dimension
      :type: int


      Maximum dimension of simplex that this complex can store.

      Set during initialisation.


   .. py:property:: max_filtration_time
      :type: float


      Current maximum filtration value in the complex.


   .. py:property:: num_simplices
      :type: int


      The total number of simplices in the complex.


   .. py:property:: num_vertices
      :type: int


      Number of vertices in the simplicial complex.

      Set during initialisation.


   .. py:method:: propagate_colours() -> None

      Ensure that simplex colours are consistent
      with the colours of their vertices.

      You should call this whenever you change the colour of any vertices.



   .. py:method:: propagate_filt_values(start_dim: int, upwards: bool = True) -> None

      Propagate filtration values upwards or downwards.

      If propagating upwards, the filtration value of each simplex
      will be set to the maximum filtration value of any of its faces.
      If propagating downwards, the filtration value of each simplex
      will be set to the minimum filtration value of any of its cofaces.
      For example, setting the filtration values in dimension 1
      to edge lengths and propagating upwards gives Rips-type filtration.

      :param start_dim: Dimension from which to start propagating (exclusive).
      :param upwards: If true then values are propagated upwards, downwards otherwise. Defaults to true.



   .. py:method:: serialised() -> list[tuple[list[int], int, float, list[int]]]

      Compute the boundary matrix of the simplicial complex.

      :return:
              A list `x` of simplices in the simplicial complex ordered by
              filtration time, dimension, and label (in that order).
              Each simplex :math:`\sigma` is represented by a tuple containing the following items.

              1.  A list containing the indices in `x` of the facets of :math:`\sigma`, sorted in ascending order.
              2.  The lexicographic key of :math:`\sigma` in the simplicial complex.
              3.  The filtration time of :math:`\sigma`.
              4.  The set of colours of the vertices of :math:`\sigma`.



   .. py:property:: simplices
      :type: list[dict[int, Simplex]]


      A list such that ``simplices[k]`` is a dictionary of handles
      to the :math:`k`-simplices in the complex.

      The key of a :math:`k`-simplex in ``simplices[k]`` is the lexicographic index
      of that simplex with respect to its vertex labels sorted in ascending order,
      counting all possible sorted subsequences of :math:`(0, ..., N-1)` of length :math:`k`.


.. py:class:: Simplex

   Class representing a simplex in a filtered simplicial complex.


   .. py:property:: colours
      :type: list[int]


      Set of colours of the vertices of the simplex.


   .. py:property:: dimension
      :type: int


      Dimension of the simplex.


   .. py:property:: facets
      :type: list[Simplex]


      Read-only list of handles to the facets of the simplex.


   .. py:property:: filtration_value
      :type: float


      Filtration value of the simplex.

      If you modify this value, you should call
      :meth:`propagate_filt_values() <chalc.filtration.Filtration.propagate_filt_values>`
      from the parent complex to ensure that filtration times remain monotonic.


   .. py:property:: label
      :type: int


      Label of the simplex in its parent filtered complex.

      A :math:`k`-simplex :math:`\sigma` is labelled by the lexicographic index of :math:`\sigma`
      with respect to its vertex labels sorted in ascending order,
      counting all possible sorted subsequences of :math:`(0, ..., N-1)` of length :math:`k`.


   .. py:method:: set_colour(colour: int) -> None

      Change the colour of a vertex.

      :raises ValueError: If the simplex is not a vertex or if
      :raises colour >=` :attr:`MaxColoursChromatic <chalc.chromatic.MaxColoursChromatic>`:

      .. tip::

         It is recommended to call the member function
         :meth:`propagate_colours() <chalc.filtration.Filtration.propagate_colours>`
         from the parent simplicial complex after changing the colour of a vertex.



   .. py:property:: vertices
      :type: list[int]


      List of (sorted, ascending) vertex labels of the simplex.


.. py:function:: complete_complex(n: int, k: int) -> Filtration

   Compute the :math:`k`-skeleton of the complete simplicial complex on :math:`n` vertices.

   Filtration values are initialised to zero and all vertices coloured with the colour 0.


.. py:function:: standard_simplex(n: int) -> Filtration

   Compute the filtered simplicial complex corresponding to the standard abstract :math:`n`-simplex.

   Filtration values are initialised to zero and all vertices coloured with the colour 0.


